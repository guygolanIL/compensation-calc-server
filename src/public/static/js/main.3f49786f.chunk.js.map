{"version":3,"sources":["components/IntegrationSelector/IntegrationSelector.js","App.js","hooks/useData.js","serviceWorker.js","theme.js","index.js"],"names":["useStyles","makeStyles","theme","IntegrationSelector","display","border","boxShadow","maxWidth","borderRadius","CheckboxCard","IntegrationName","marginRight","style","integrations","onCheck","classes","className","map","integration","key","Checkbox","onChange","e","provider","status","target","checked","color","id","toUpperCase","App","IntegrationSelectorContainer","marginTop","Loader","textAlign","margin","useState","selectedProviders","setSelectedProviders","shouldLoad","url","options","initialData","data","setData","loading","setLoading","useEffect","a","fetch","res","ok","json","fetchedData","setTimeout","getData","useData","method","loader","CircularProgress","size","selector","useMemo","Slide","timeout","direction","in","Fade","name","Boolean","window","location","hostname","match","createMuiTheme","palette","primary","main","contrastText","secondary","ReactDOM","render","ThemeProvider","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.3f49786f.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./IntegrationSelector.css\";\r\nimport Checkbox from \"@material-ui/core/Checkbox\";\r\nimport { makeStyles } from \"@material-ui/core\";\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    IntegrationSelector: {\r\n        display: \"inline-block\",\r\n        border: \"solid 1px #b0abab\",\r\n        boxShadow: \"0px 0px 7px 3px #b0abab\",\r\n        maxWidth: \"700px\",\r\n        borderRadius: \"10px\"\r\n    },\r\n    CheckboxCard: {\r\n        display: \"inline-block\"\r\n    },\r\n    IntegrationName: {\r\n        marginRight: \"10px\"\r\n    }\r\n}));\r\n\r\nexport function IntegrationSelector({ style, integrations, onCheck }) {\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <div style={style} className={classes.IntegrationSelector}>\r\n            {integrations.map(integration => (\r\n                <div className={classes.CheckboxCard} key={integration}>\r\n                    <Checkbox\r\n                        onChange={e => {\r\n                            onCheck({\r\n                                provider: integration,\r\n                                status: e.target.checked\r\n                            });\r\n                        }}\r\n                        color=\"primary\"\r\n                        id={`${integration}-checkbox`}\r\n                    />\r\n                    <span className={classes.IntegrationName}>\r\n                        {integration.toUpperCase()}\r\n                    </span>\r\n                </div>\r\n            ))}\r\n        </div>\r\n    );\r\n}\r\n","import React, {useMemo, useState} from \"react\";\r\nimport {IntegrationSelector} from \"./components/IntegrationSelector/IntegrationSelector\";\r\nimport {CircularProgress, Fade, Slide} from \"@material-ui/core\";\r\nimport useData from \"./hooks/useData\";\r\nimport makeStyles from \"@material-ui/core/styles/makeStyles\";\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    App: {},\r\n    IntegrationSelectorContainer: {\r\n        display: \"flex\",\r\n        marginTop: \"50px\"\r\n    },\r\n    Loader: {\r\n        textAlign: \"center\",\r\n        margin: \"auto\"\r\n    }\r\n}));\r\n\r\nfunction App() {\r\n    const classes = useStyles();\r\n    const [selectedProviders, setSelectedProviders] = useState({});\r\n\r\n    const [data, loading] = useData(true, {\r\n        url: \"/data\",\r\n        options: {method: \"GET\"}\r\n    });\r\n\r\n    const loader = <div className={classes.Loader}><CircularProgress size='7rem' color='primary'/></div>;\r\n\r\n    const selector = useMemo(\r\n        () => (\r\n            <Slide timeout={1500} direction={\"up\"} in={!loading}>\r\n                <div\r\n                    style={{\r\n                        margin: \"auto\"\r\n                    }}\r\n                >\r\n                    <Fade timeout={3500} in={!loading}>\r\n                        <IntegrationSelector\r\n                            onCheck={({provider, status}) => {\r\n                                setSelectedProviders({\r\n                                    ...selectedProviders,\r\n                                    [provider]: status\r\n                                });\r\n                            }}\r\n                            integrations={data.map(integration => integration.name)}\r\n                        />\r\n                    </Fade>\r\n                </div>\r\n            </Slide>\r\n        ),\r\n        [data, loading, selectedProviders]\r\n    );\r\n\r\n    return (\r\n        <div className={classes.App}>\r\n            <div className={classes.IntegrationSelectorContainer}>\r\n                {loading ? loader : selector}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","import { useState, useEffect } from \"react\";\r\n\r\nexport default function useData(\r\n    shouldLoad,\r\n    { url, options },\r\n    initialData = [],\r\n) {\r\n    const [data, setData] = useState(initialData);\r\n    const [loading, setLoading] = useState(false);\r\n\r\n    useEffect(() => {\r\n        async function getData() {\r\n            try {\r\n                if (shouldLoad) setLoading(true);\r\n\r\n                \r\n                const res = await fetch(url, options);\r\n                if(res.ok) {\r\n                    const fetchedData = await res.json();\r\n                    setData(fetchedData);\r\n                } \r\n                setTimeout(() => {\r\n                    if (shouldLoad) setLoading(false);\r\n                }, 2000);\r\n                \r\n            } catch (error) {\r\n                throw error;\r\n            }\r\n        }\r\n\r\n        getData();\r\n    }, []);\r\n\r\n    return [data, loading];\r\n};\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import { createMuiTheme } from \"@material-ui/core\";\r\n\r\nconst theme = createMuiTheme({\r\n    palette: {\r\n        primary: {\r\n            main: '#d4387c',\r\n            contrastText: '#ff0000'\r\n        },\r\n        secondary: {\r\n            main: \"#E3E2DF\",\r\n            contrastText: \"#0000ff\"\r\n        }\r\n    }\r\n});\r\n\r\nexport default theme;","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\nimport { ThemeProvider } from \"@material-ui/core\";\r\nimport theme from \"./theme\";\r\n\r\nReactDOM.render(\r\n    <ThemeProvider theme={theme}>\r\n        <App />\r\n    </ThemeProvider>,\r\n    document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}