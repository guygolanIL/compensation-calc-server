{"version":3,"sources":["components/IntegrationSelector/IntegrationSelector.js","components/Filters/Filters.js","App.js","hooks/useData.js","serviceWorker.js","theme.js","index.js"],"names":["useStyles","makeStyles","theme","IntegrationSelector","display","border","boxShadow","maxWidth","borderRadius","CheckboxCard","IntegrationName","marginRight","style","integrations","onCheck","classes","className","map","integration","key","Checkbox","onChange","e","provider","status","target","checked","color","id","toUpperCase","formControl","margin","spacing","minWidth","Filters","padding","textAlign","width","React","memo","jobs","onSelectJob","selectedJob","onChangedExp","exp","maxYears","FormControl","InputLabel","Select","labelId","value","job","MenuItem","Slider","onChangeCommitted","defaultValue","aria-labelledby","valueLabelDisplay","max","App","IntegrationSelectorContainer","marginTop","Loader","FiltersContainer","noDataError","useState","selectedProviders","setSelectedProviders","setSelectedJob","setExp","shouldLoad","url","options","initialData","data","setData","loading","setLoading","useEffect","a","fetch","res","ok","json","fetchedData","getData","useData","method","loader","useMemo","CircularProgress","size","selector","Slide","timeout","direction","in","Fade","name","filters","console","log","length","Object","keys","getComponentsIfNotLoading","useCallback","Boolean","window","location","hostname","match","createMuiTheme","palette","primary","main","contrastText","secondary","ReactDOM","render","ThemeProvider","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.8d7bcdcb.chunk.js","sourcesContent":["import React from \"react\";\r\nimport Checkbox from \"@material-ui/core/Checkbox\";\r\nimport { makeStyles } from \"@material-ui/core\";\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    IntegrationSelector: {\r\n        display: \"inline-block\",\r\n        border: \"solid 1px #b0abab\",\r\n        boxShadow: \"0px 0px 7px 3px #b0abab\",\r\n        maxWidth: \"700px\",\r\n        borderRadius: \"10px\"\r\n    },\r\n    CheckboxCard: {\r\n        display: \"inline-block\"\r\n    },\r\n    IntegrationName: {\r\n        marginRight: \"10px\"\r\n    }\r\n}));\r\n\r\nexport function IntegrationSelector({ style, integrations, onCheck }) {\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <div style={style} className={classes.IntegrationSelector}>\r\n            {integrations.map(integration => (\r\n                <div className={classes.CheckboxCard} key={integration}>\r\n                    <Checkbox\r\n                        onChange={e => {\r\n                            onCheck({\r\n                                provider: integration,\r\n                                status: e.target.checked\r\n                            });\r\n                        }}\r\n                        color=\"primary\"\r\n                        id={`${integration}-checkbox`}\r\n                    />\r\n                    <span className={classes.IntegrationName}>\r\n                        {integration.toUpperCase()}\r\n                    </span>\r\n                </div>\r\n            ))}\r\n        </div>\r\n    );\r\n}\r\n","import React from \"react\";\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\nimport InputLabel from \"@material-ui/core/InputLabel\";\r\nimport Select from \"@material-ui/core/Select\";\r\nimport makeStyles from \"@material-ui/core/styles/makeStyles\";\r\nimport Slider from \"@material-ui/core/Slider\";\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    formControl: {\r\n        margin: theme.spacing(2),\r\n        minWidth: 120\r\n    },\r\n    Filters: {\r\n        margin: \"auto\",\r\n        padding: \"10px 20px\",\r\n        textAlign: 'center',\r\n        display: \"inline-block\",\r\n        border: \"solid 1px #b0abab\",\r\n        boxShadow: \"0px 0px 7px 3px #b0abab\",\r\n        width: \"73vw\",\r\n        borderRadius: \"10px\"\r\n    }\r\n}));\r\n\r\nconst Filters = ({\r\n    jobs,\r\n    onSelectJob,\r\n    selectedJob,\r\n    exp,\r\n    onChangedExp,\r\n    maxYears\r\n}) => {\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <div className={classes.Filters}>\r\n            <FormControl className={classes.formControl}>\r\n                <InputLabel id=\"jobSelectLabel\">Job</InputLabel>\r\n                <Select\r\n                    labelId=\"jobSelectLabel\"\r\n                    id=\"jobSelect\"\r\n                    value={selectedJob}\r\n                    onChange={e => onSelectJob(e.target.value)}\r\n                >\r\n                    {jobs\r\n                        ? jobs.map(job => (\r\n                              <MenuItem key={job} value={job}>\r\n                                  {job}\r\n                              </MenuItem>\r\n                          ))\r\n                        : null}\r\n                </Select>\r\n            </FormControl>\r\n            <FormControl className={classes.formControl}>\r\n                <InputLabel id=\"expSliderLabel\">Exp</InputLabel>\r\n                <Slider\r\n                    onChangeCommitted={(e, value) => onChangedExp(value)}\r\n                    defaultValue={0}\r\n                    aria-labelledby=\"discrete-slider\"\r\n                    valueLabelDisplay=\"auto\"\r\n                    max={maxYears}\r\n                />\r\n            </FormControl>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default React.memo(Filters);\r\n","import React, { useMemo, useState, useCallback } from \"react\";\r\nimport { IntegrationSelector } from \"./components/IntegrationSelector/IntegrationSelector\";\r\nimport { CircularProgress, Fade, Slide } from \"@material-ui/core\";\r\nimport useData from \"./hooks/useData\";\r\nimport makeStyles from \"@material-ui/core/styles/makeStyles\";\r\nimport Filters from \"./components/Filters/Filters\";\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    App: {},\r\n\r\n    IntegrationSelectorContainer: {\r\n        display: \"flex\",\r\n        marginTop: \"50px\"\r\n    },\r\n\r\n    Loader: {\r\n        textAlign: \"center\",\r\n        margin: \"100px auto\"\r\n    },\r\n\r\n    FiltersContainer: {\r\n        display: \"flex\",\r\n        margin: \"1rem 0 1rem 0\"\r\n    }\r\n}));\r\n\r\nconst noDataError = <div>Failed to fetch data...</div>;\r\n\r\nfunction App() {\r\n    const classes = useStyles();\r\n    const [selectedProviders, setSelectedProviders] = useState({});\r\n    const [selectedJob, setSelectedJob] = useState(\"\");\r\n    const [exp, setExp] = useState(0);\r\n\r\n    const [data, loading] = useData(true, {\r\n        url: \"/data\",\r\n        options: { method: \"GET\" }\r\n    });\r\n\r\n    const loader = useMemo(\r\n        () => (\r\n            <div className={classes.Loader}>\r\n                <CircularProgress size=\"7rem\" color=\"primary\" />\r\n            </div>\r\n        ),\r\n        [classes.Loader]\r\n    );\r\n\r\n    const selector = useMemo(\r\n        () => (\r\n            <Slide timeout={1500} direction={\"up\"} in={!loading}>\r\n                <div\r\n                    style={{\r\n                        margin: \"auto\"\r\n                    }}\r\n                >\r\n                    <Fade timeout={3500} in={!loading}>\r\n                        <IntegrationSelector\r\n                            onCheck={({ provider, status }) => {\r\n                                setSelectedProviders({\r\n                                    ...selectedProviders,\r\n                                    [provider]: status\r\n                                });\r\n                            }}\r\n                            integrations={data.map(\r\n                                integration => integration.name\r\n                            )}\r\n                        />\r\n                    </Fade>\r\n                </div>\r\n            </Slide>\r\n        ),\r\n        [data, loading, selectedProviders]\r\n    );\r\n\r\n    const filters = useMemo(\r\n        () => (\r\n            <Slide timeout={2500} direction=\"up\" in={!loading}>\r\n                <div\r\n                    style={{\r\n                        margin: \"auto\"\r\n                    }}\r\n                >\r\n                    <Fade timeout={5000} in={!loading}>\r\n                        <div>\r\n                            <Filters\r\n                                maxYears={9}\r\n                                exp={exp}\r\n                                onChangedExp={exp => {\r\n                                    console.log(exp);\r\n                                    setExp(exp);\r\n                                }}\r\n                                onSelectJob={job => setSelectedJob(job)}\r\n                                selectedJob={selectedJob}\r\n                                jobs={\r\n                                    data\r\n                                        ? data.length > 0\r\n                                            ? Object.keys(data[0].data)\r\n                                            : null\r\n                                        : null\r\n                                }\r\n                            />\r\n                        </div>\r\n                    </Fade>\r\n                </div>\r\n            </Slide>\r\n        ),\r\n        [data, selectedJob, exp, loading]\r\n    );\r\n\r\n    const getComponentsIfNotLoading = useCallback(() => {\r\n        if (loading) {\r\n            return loader;\r\n        }\r\n        if (data.length !== 0) {\r\n            return (\r\n                <>\r\n                    <div className={classes.IntegrationSelectorContainer}>\r\n                        {selector}\r\n                    </div>\r\n                    <div className={classes.FiltersContainer}>{filters}</div>\r\n                </>\r\n            );\r\n        }\r\n\r\n        return noDataError;\r\n    }, [\r\n        loading,\r\n        data,\r\n        loader,\r\n        selector,\r\n        classes.IntegrationSelectorContainer,\r\n        filters,\r\n        classes.FiltersContainer\r\n    ]);\r\n\r\n    return <div className={classes.App}>{getComponentsIfNotLoading()}</div>;\r\n}\r\n\r\nexport default App;\r\n","import { useState, useEffect } from \"react\";\r\n\r\nexport default function useData(\r\n    shouldLoad,\r\n    { url, options },\r\n    initialData = []\r\n) {\r\n    const [data, setData] = useState(initialData);\r\n    const [loading, setLoading] = useState(false);\r\n\r\n    useEffect(() => {\r\n        async function getData() {\r\n            try {\r\n                if (shouldLoad) setLoading(true);\r\n\r\n                const res = await fetch(url, options);\r\n                if (res.ok) {\r\n                    const fetchedData = await res.json();\r\n                    setData(fetchedData);\r\n                }\r\n\r\n                if (shouldLoad) setLoading(false);\r\n            } catch (error) {\r\n                throw error;\r\n            }\r\n        }\r\n\r\n        getData();\r\n    }, []);\r\n\r\n    return [data, loading];\r\n}\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import { createMuiTheme } from \"@material-ui/core\";\r\n\r\nconst theme = createMuiTheme({\r\n    palette: {\r\n        primary: {\r\n            main: '#d4387c',\r\n            contrastText: '#ffffff'\r\n        },\r\n        secondary: {\r\n            main: \"#E3E2DF\",\r\n            contrastText: \"#0000ff\"\r\n        }\r\n    }\r\n});\r\n\r\nexport default theme;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\nimport { ThemeProvider } from \"@material-ui/core\";\r\nimport theme from \"./theme\";\r\n\r\nReactDOM.render(\r\n    <ThemeProvider theme={theme}>\r\n        <App />\r\n    </ThemeProvider>,\r\n    document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}